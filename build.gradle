group = "dev.lynith"
version = "1.0.0"

subprojects {
    if (!file("build.gradle").exists() || project.name == rootProject.name) {
        return
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    plugins.withId("fabric-loom") {
        project.ext.minecraftVersion = project.name
        Integer _minecraftVersionInt = (project.ext.minecraftVersion.split("\\.")[0] + project.ext.minecraftVersion.split("\\.")[1]).toInteger()
        project.ext.isLegacyMinecraft = _minecraftVersionInt < 113
        project.ext.minecraftMappings = project.ext.isLegacyMinecraft ? "net.legacyfabric:yarn:${project.ext.minecraftVersion}+build.mcp" : loom.officialMojangMappings()
        JavaVersion _javaVersion = _minecraftVersionInt < 117 ? JavaVersion.VERSION_1_8 : JavaVersion.VERSION_17

        repositories {
            maven {
                name = "Fabric"
                url = uri("https://maven.fabricmc.net/")
            }
            maven {
                name = "legacy-fabric"
                url = uri("https://repo.legacyfabric.net/repository/legacyfabric/")
            }
            maven {
                name = "Spongepowered"
                url = uri("https://repo.spongepowered.org/maven/")
            }
            maven {
                name = "cursed-mappings"
                url = "https://raw.githubusercontent.com/BleachDev/cursed-mappings/main/"
            }
        }

        compileJava {
            sourceCompatibility = _javaVersion
            targetCompatibility = _javaVersion
        }

        tasks.register("start_${project.name}") {
            group = rootProject.name
            dependsOn(rootProject.tasks.named("exportAll"))
        }.get().finalizedBy(tasks.named("runClient"))

        tasks.register("zipMerged", Zip) {
            archiveFileName.set("${project.name}-merged.jar")
            destinationDirectory.set(file("$rootDir/build/"))
            from("$rootDir/build/${project.name}-merged")
        }.get().finalizedBy(tasks.register("cleanMerged") {
            doLast {
                delete("$rootDir/build/${project.name}-merged")
                delete("$rootDir/build/tmp")
            }
        })

        tasks.register("merge_${project.name}") {
            group = rootProject.name
            dependsOn(rootProject.tasks.named("exportAll"))

            doLast {
                def versionFile = "$rootDir/build/${project.name}.jar"
                def coreFile = "$rootDir/build/Core.jar"
                def agentFile = "$rootDir/build/JavaAgent.jar"

                def mergedFile = "$rootDir/build/${project.name}-merged"
                println("Merging '${project.name}.jar', 'Core.jar' and 'JavaAgent.jar' to ${mergedFile}")

                copy {
                    from zipTree(agentFile)
                    from zipTree(coreFile)
                    from zipTree(versionFile)
                    into mergedFile

                    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                }
            }
        }.get().finalizedBy(tasks.named("zipMerged"))

        dependencies {
            compileOnly(project(":Core"))

            compileOnly(libs.mixin) {
                exclude module: 'launchwrapper'
                exclude module: 'guava'
                exclude module: 'gson'
                exclude module: 'commons-io'
            }

            minecraft("com.mojang:minecraft:${project.ext.minecraftVersion}")
            mappings(project.ext.minecraftMappings)
        }

        remapJar {
            sourceNamespace = "named"
            targetNamespace = "official"
        }

        if (_javaVersion == JavaVersion.VERSION_1_8) {
            tasks.withType(JavaExec).configureEach {
                javaLauncher = javaToolchains.launcherFor {
                    languageVersion.set(JavaLanguageVersion.of(8))
                }
            }
        }

        loom {
            mixin.useLegacyMixinAp = false

            runs.client {
                runDir = "run"
                vmArgs "-javaagent:${rootDir}/build/${project.name}-merged.jar"

                environment = "client"
                defaultMainClass = "net.minecraft.client.main.Main"
            }

            runConfigs.configureEach {
                programArgs "--version=$project.ext.minecraftVersion"
                programArgs "--accessToken=0"
            }
        }

        jar.manifest.attributes(
            "MixinConfigs": "client.mixins.json"
        )
    }

    plugins.withType(JavaPlugin) {
        java {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }

        dependencies {
            compileOnly(libs.lombok)
            annotationProcessor(libs.lombok)
        }

        tasks.register("export") {
            group = rootProject.name + " ${project.name}"
            dependsOn(tasks.hasProperty("build") ? tasks.named("build") : tasks.named("jar"))

            doLast {
                def inFile = "$projectDir/build/libs/${project.name}.jar"
                def outDir = "$rootDir/build/"
                println("Copying ${inFile} to ${outDir}")
                copy {
                    from inFile
                    into outDir
                }
            }
        }
    }

}

tasks.register("exportAll") {
    group = rootProject.name

    doLast {
        subprojects.each { subproject ->
            if (subproject.tasks.findByName("export")) {
                subproject.tasks.named("export")
            }
        }
    }
}
