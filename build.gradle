plugins {
    id "fabric-loom" version "1.2.5" apply false
    id "io.freefair.lombok" version "8.0.1" apply true
}

group = "dev.lynith.multiclient"
version = "1.0.0"

subprojects {

    if (!file("build.gradle").exists() || project.name == rootProject.name) {
        return
    }

    plugins.withId("fabric-loom") {
        dependencies {
            compileOnly('net.fabricmc:sponge-mixin:0.12.4+mixin.0.8.5') {
                exclude module: 'launchwrapper'
                exclude module: 'guava'
                exclude module: 'gson'
                exclude module: 'commons-io'
            }
            annotationProcessor('org.spongepowered:mixin:0.8.5:processor')

            compileOnly(project(":Core"))
        }

        repositories {
            maven {
                name = "Spongepowered"
                url = uri("https://repo.spongepowered.org/maven")
            }
        }

        remapJar {
            sourceNamespace = "named"
            targetNamespace = "official"
        }

        loom {
            mixin {
                useLegacyMixinAp = false
            }
        }

        jar {
            manifest {
                attributes(
                    "MixinConfigs": "client.mixins.json"
                )
            }
        }

    }

    plugins.withType(JavaPlugin).tap {
        configureEach {
            dependencies {
                compileOnly("org.projectlombok:lombok:1.18.20")
                annotationProcessor("org.projectlombok:lombok:1.18.20")
            }

            repositories {
                mavenCentral()
            }

            tasks.register("export") {
                group = "multiclient"
                dependsOn(tasks.hasProperty("build") ? tasks.named("build") : tasks.named("jar"))

                doLast {
                    def inFile = "$projectDir/build/libs/${project.name}.jar"
                    def outDir = "$rootDir/build/"
                    println("Copying ${inFile} to ${outDir}")
                    copy {
                        from inFile
                        into outDir
                    }
                }
            }
        }
    }
}

tasks.register("export") {
    group = "multiclient"

    doLast {
        subprojects.each { subproject ->
            if (subproject.tasks.findByName("export") != null) {
                subproject.tasks.named("export")
            }
        }
    }
}
